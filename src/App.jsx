// –°—é–¥–∞ –≤—Å—Ç–∞–≤–∏–º –Ω–∞—à –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ModelSelector
// (—É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ –æ—à–∏–±–æ–∫)
import React, { useState } from 'react';


const App = () => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    taskTypes: [],
    qualityPriority: 1,
    volumePriority: 1,
    speedPriority: 1,
    budgetPriority: 1,
    languages: [],
    inputLanguage: 'ru',
    outputLanguage: 'ru'
  });
  const [models, setModels] = useState([]);
  const [loading, setLoading] = useState(false);
 
  // ‚≠ê –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® API –ö–õ–Æ–ß ‚≠ê
  const API_KEY = 'aa_UBeRmofLZUpndgJhNQKYXwzEcbqHEGrl';


  // ‚≠ê API –§–£–ù–ö–¶–ò–Ø - –ó–ê–ü–†–û–° –ö ARTIFICIAL ANALYSIS ‚≠ê
  const fetchModelsFromAPI = async () => {
    if (!API_KEY || API_KEY === 'aa_UBeRmofLZUpndgJhNQKYXwzEcbqHEGrl') {
      setModels(mockModels);
      return;
    }


    setLoading(true);
    try {
      const response = await fetch('https://artificialanalysis.ai/api/models', {
        headers: {
          'x-api-key': API_KEY, // ‚≠ê –ó–î–ï–°–¨ –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø API –ö–õ–Æ–ß ‚≠ê
          'Content-Type': 'application/json'
        }
      });
     
      if (response.ok) {
        const data = await response.json();
        const formattedModels = data.models?.map(model => ({
          id: model.model_id || model.id,
          name: model.model_name || model.name,
          creator: model.creator || 'Unknown',
          quality_score: model.quality_score || 80,
          speed_score: model.speed_score || 80,
          price_per_1k_tokens: model.price_input_1k || 0.001,
          context_length: model.context_length || 4000,
          description: model.description || 'AI –º–æ–¥–µ–ª—å',
          best_for: model.use_cases || ['general']
        })) || [];
       
        setModels(formattedModels.length > 0 ? formattedModels : mockModels);
      } else {
        setModels(mockModels);
      }
    } catch (error) {
      setModels(mockModels);
    } finally {
      setLoading(false);
    }
  };


  const taskTypes = [
    { id: 'translation', name: '–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤', description: '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏, –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è', icon: 'üåê' },
    { id: 'generation', name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π, –ø–æ—Å—Ç–æ–≤, –∫–æ–Ω—Ç–µ–Ω—Ç–∞', icon: '‚úçÔ∏è' },
    { id: 'qa', name: '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', description: '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è', icon: '‚ùì' },
    { id: 'coding', name: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞', description: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞', icon: 'üíª' },
    { id: 'creative', name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏', description: '–ò—Å—Ç–æ—Ä–∏–∏, –ø–æ—ç–∑–∏—è, —Å—Ü–µ–Ω–∞—Ä–∏–∏', icon: 'üé®' },
    { id: 'analysis', name: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö', description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', icon: 'üìä' }
  ];


  const languages = [
    { id: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { id: 'en', name: 'English', flag: 'üá∫üá∏' },
    { id: 'de', name: 'Deutsch', flag: 'üá©üá™' },
    { id: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
    { id: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
    { id: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥' }
  ];


  const mockModels = [
    {
      id: 'gpt-4-turbo',
      name: 'GPT-4 Turbo',
      creator: 'OpenAI',
      quality_score: 95,
      speed_score: 75,
      price_per_1k_tokens: 0.03,
      context_length: 128000,
      description: '–°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á',
      best_for: ['complex reasoning', 'creative writing']
    },
    {
      id: 'claude-3-sonnet',
      name: 'Claude 3 Sonnet',
      creator: 'Anthropic',
      quality_score: 88,
      speed_score: 85,
      price_per_1k_tokens: 0.015,
      context_length: 200000,
      description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á',
      best_for: ['analysis', 'writing']
    },
    {
      id: 'gemini-pro',
      name: 'Gemini Pro',
      creator: 'Google',
      quality_score: 82,
      speed_score: 90,
      price_per_1k_tokens: 0.0005,
      context_length: 32000,
      description: '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å',
      best_for: ['fast responses', 'cost-effective']
    }
  ];


  const getPriorityComment = (value, type) => {
    const comments = {
      quality: ['–±–∞–∑–æ–≤–æ–µ', '–ø—Ä–æ—Å—Ç–æ–µ', '—Ö–æ—Ä–æ—à–µ–µ', '–æ—Ç–ª–∏—á–Ω–æ–µ', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ'],
      speed: ['–º–µ–¥–ª–µ–Ω–Ω–æ', '—Ç–µ—Ä–ø–∏–º–æ', '–±—ã—Å—Ç—Ä–æ', '–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ', '–º–≥–Ω–æ–≤–µ–Ω–Ω–æ'],
      budget: ['–¥–æ—Ä–æ–≥–æ', '—Å—Ä–µ–¥–Ω–µ', '—ç–∫–æ–Ω–æ–º–Ω–æ', '–¥–µ—à–µ–≤–æ', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ'],
      volume: ['–º–∞–ª–æ', '–Ω–µ–º–Ω–æ–≥–æ', '—Å—Ä–µ–¥–Ω–µ', '–º–Ω–æ–≥–æ', '–æ–≥—Ä–æ–º–Ω–æ']
    };
    const index = Math.min(Math.floor(value / 2), 4);
    return comments[type][index];
  };


  const getQualityComment = (score) => {
    if (score >= 90) return '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
    if (score >= 80) return '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
    if (score >= 70) return '—Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
    return '–±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
  };


  const getSpeedComment = (score) => {
    if (score >= 90) return '–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ';
    if (score >= 80) return '–±—ã—Å—Ç—Ä–æ';
    if (score >= 70) return '—Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å';
    return '–º–µ–¥–ª–µ–Ω–Ω–æ';
  };


  const getPriceComment = (price) => {
    if (price <= 0.001) return '–æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ';
    if (price <= 0.01) return '–Ω–µ–¥–æ—Ä–æ–≥–æ';
    if (price <= 0.02) return '—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞';
    return '–¥–æ—Ä–æ–≥–æ';
  };


  const getContextComment = (context) => {
    if (context >= 100000) return '–æ–≥—Ä–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç';
    if (context >= 50000) return '–±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç';
    if (context >= 10000) return '—Å—Ä–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç';
    return '–º–∞–ª—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç';
  };


  const calculatePricePerWord = (pricePerToken, inputLang, outputLang) => {
    // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∫ —Å–ª–æ–≤–∞–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    const tokenRatios = {
      'en': 0.75, // –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π
      'ru': 2.5,  // —Ä—É—Å—Å–∫–∏–π –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π
      'de': 1.2,  // –Ω–µ–º–µ—Ü–∫–∏–π
      'fr': 1.1,  // —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
      'es': 1.0,  // –∏—Å–ø–∞–Ω—Å–∫–∏–π
      'zh': 1.8   // –∫–∏—Ç–∞–π—Å–∫–∏–π
    };
   
    const inputRatio = tokenRatios[inputLang] || 1;
    const outputRatio = tokenRatios[outputLang] || 1;
    const avgRatio = (inputRatio + outputRatio) / 2;
   
    return (pricePerToken * avgRatio).toFixed(6);
  };


  const handleTaskTypeToggle = (taskId) => {
    setFormData(prev => ({
      ...prev,
      taskTypes: prev.taskTypes.includes(taskId)
        ? prev.taskTypes.filter(id => id !== taskId)
        : [...prev.taskTypes, taskId]
    }));
  };


  const handleLanguageToggle = (langId) => {
    setFormData(prev => ({
      ...prev,
      languages: prev.languages.includes(langId)
        ? prev.languages.filter(id => id !== langId)
        : [...prev.languages, langId]
    }));
  };


  const calculateModelScore = (model) => {
    const weights = {
      quality: formData.qualityPriority / 10,
      speed: formData.speedPriority / 10,
      budget: (10 - formData.budgetPriority) / 10,
      volume: formData.volumePriority / 10
    };


    const qualityNorm = model.quality_score;
    const speedNorm = model.speed_score;
    const priceNorm = Math.max(0, 100 - (model.price_per_1k_tokens * 1000));
    const contextNorm = Math.min(100, (model.context_length / 1000) * 2);


    const score = (
      qualityNorm * weights.quality +
      speedNorm * weights.speed +
      priceNorm * weights.budget +
      contextNorm * weights.volume
    );


    return Math.min(100,Math.round(score));
  };


  const getRecommendedModels = () => {
    return models
      .map(model => ({
        ...model,
        score: calculateModelScore(model)
      }))
      .sort((a, b) => b.score - a.score);
  };


  const getMedalEmoji = (place) => {
    switch (place) {
      case 1: return 'ü•á';
      case 2: return 'ü•à';
      case 3: return 'ü•â';
      default: return '‚≠ê';
    }
  };


  const handleNextStep = async () => {
    await fetchModelsFromAPI(); // ‚≠ê –ó–î–ï–°–¨ –í–´–ó–´–í–ê–ï–¢–°–Ø API ‚≠ê
    setStep(2);
  };


  if (step === 1) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg">
          {/* –õ–æ–≥–æ—Ç–∏–ø –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
          <div className="text-center mb-8">
            <h1 className="text-5xl font-bold text-blue-600 mb-4">
              GetBestAI
            </h1>
            <p className="text-lg text-gray-700 max-w-2xl mx-auto">
              –£–º–Ω—ã–π –ø–æ–¥–±–æ—Ä AI –º–æ–¥–µ–ª–µ–π –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏–µ.
            </p>
          </div>


          {/* Progress Bar */}
          <div className="mb-8">
            <div className="flex items-center justify-center mb-4">
              <div className="w-8 h-8 rounded-full bg-blue-600 text-white flex items-center justify-center text-sm font-medium">1</div>
              <div className="w-12 h-1 mx-2 bg-gray-200" />
              <div className="w-8 h-8 rounded-full bg-gray-200 text-gray-500 flex items-center justify-center text-sm font-medium">2</div>
            </div>
            <div className="text-center text-sm text-gray-600">
              –®–∞–≥ 1 –∏–∑ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            </div>
          </div>


          {/* Task Types Selection */}
          <div className="mb-8">
            <h3 className="text-lg font-medium text-gray-800 mb-4">
              –¢–∏–ø—ã –∑–∞–¥–∞—á <span className="text-sm text-gray-500">(–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)</span>
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {taskTypes.map(task => (
                <button
                  key={task.id}
                  onClick={() => handleTaskTypeToggle(task.id)}
                  className={`p-4 text-left border rounded-lg transition-all ${
                    formData.taskTypes.includes(task.id)
                      ? 'border-blue-500 bg-blue-50 text-blue-700'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <div className="flex items-center gap-2 mb-2">
                    <span className="text-lg">{task.icon}</span>
                    <div className="font-medium">{task.name}</div>
                  </div>
                  <div className="text-sm text-gray-500">{task.description}</div>
                </button>
              ))}
            </div>
          </div>


          {/* Priority Sliders */}
          <div className="mb-8">
            <h3 className="text-lg font-medium text-gray-800 mb-4">
              –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (1 = –Ω–µ–≤–∞–∂–Ω–æ, 10 = –∫—Ä–∏—Ç–∏—á–Ω–æ)
            </h3>
           
            <div className="space-y-6">
              {[
                { key: 'qualityPriority', label: '–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞', icon: '‚≠ê', type: 'quality' },
                { key: 'speedPriority', label: '–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã', icon: '‚ö°', type: 'speed' },
                { key: 'budgetPriority', label: '–≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å', icon: 'üí∞', type: 'budget' },
                { key: 'volumePriority', label: '–†–∞–±–æ—Ç–∞ —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏', icon: 'üìä', type: 'volume' }
              ].map(({ key, label, icon, type }) => (
                <div key={key} className="p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center gap-2 mb-2">
                    <span className="text-lg">{icon}</span>
                    <label className="text-sm font-medium text-gray-700">{label}</label>
                    <span className="text-sm text-gray-500">({formData[key]}/10)</span>
                    <span className="text-sm text-blue-600 ml-auto">
                      {getPriorityComment(formData[key], type)}
                    </span>
                  </div>
                  <input
                    type="range"
                    min="1"
                    max="10"
                    value={formData[key]}
                    onChange={(e) => setFormData(prev => ({
                      ...prev,
                      [key]: parseInt(e.target.value)
                    }))}
                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                  />
                  <div className="flex justify-between text-xs text-gray-400 mt-1">
                    <span>–ù–µ–≤–∞–∂–Ω–æ</span>
                    <span>–ö—Ä–∏—Ç–∏—á–Ω–æ</span>
                  </div>
                </div>
              ))}
            </div>
          </div>


          {/* Languages */}
          <div className="mb-8">
            <h3 className="text-lg font-medium text-gray-800 mb-4">–Ø–∑—ã–∫–∏ —Ä–∞–±–æ—Ç—ã</h3>
           
            {/* Input Language */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –Ø–∑—ã–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
              </label>
              <select
                value={formData.inputLanguage}
                onChange={(e) => setFormData(prev => ({ ...prev, inputLanguage: e.target.value }))}
                className="w-full p-2 border border-gray-300 rounded-lg"
              >
                {languages.map(lang => (
                  <option key={lang.id} value={lang.id}>
                    {lang.flag} {lang.name}
                  </option>
                ))}
              </select>
            </div>


            {/* Output Language */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
              </label>
              <select
                value={formData.outputLanguage}
                onChange={(e) => setFormData(prev => ({ ...prev, outputLanguage: e.target.value }))}
                className="w-full p-2 border border-gray-300 rounded-lg"
              >
                {languages.map(lang => (
                  <option key={lang.id} value={lang.id}>
                    {lang.flag} {lang.name}
                  </option>
                ))}
              </select>
            </div>
          </div>


          {/* Next Button */}
          <button
            onClick={handleNextStep}
            disabled={formData.taskTypes.length === 0}
            className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            –ü–æ–¥–æ–±—Ä–∞—Ç—å –º–æ–¥–µ–ª–∏
            <span>‚Üí</span>
          </button>
         
          {formData.taskTypes.length === 0 && (
            <p className="text-center text-sm text-red-500 mt-2">
              –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –∑–∞–¥–∞—á–∏
            </p>
          )}
        </div>
      </div>
    );
  }


  if (step === 2) {
    const recommendedModels = getRecommendedModels();


    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto p-6">
          <div className="mb-8">
            <button
              onClick={() => setStep(1)}
              className="text-blue-600 hover:text-blue-700 mb-4 flex items-center gap-1"
            >
              ‚Üê –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            </button>
           
            {/* Progress Bar */}
            <div className="mb-6">
              <div className="flex items-center justify-center mb-4">
                <div className="w-8 h-8 rounded-full bg-blue-600 text-white flex items-center justify-center text-sm font-medium">1</div>
                <div className="w-12 h-1 mx-2 bg-blue-600" />
                <div className="w-8 h-8 rounded-full bg-blue-600 text-white flex items-center justify-center text-sm font-medium">2</div>
              </div>
              <div className="text-center text-sm text-gray-600">
                –®–∞–≥ 2 –∏–∑ 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞
              </div>
            </div>
           
            <h1 className="text-3xl font-bold text-gray-800 mb-2">
              –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å
            </h1>
            <p className="text-gray-600">
              –ú–æ–¥–µ–ª–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            </p>
          </div>


          {loading ? (
            <div className="flex items-center justify-center py-12">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span className="ml-2">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏...</span>
            </div>
          ) : (
            <div className="space-y-6">
              {recommendedModels.map((model, index) => (
                <div key={model.id} className="bg-white rounded-lg shadow-lg p-6 border-l-4 border-blue-500">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">{getMedalEmoji(index + 1)}</span>
                      <div>
                        <div className="flex items-center gap-2 mb-1">
                          <h3 className="text-xl font-bold text-gray-800">{model.name}</h3>
                          <span className="text-gray-500">by {model.creator}</span>
                        </div>
                        <p className="text-blue-600 text-sm mb-1">
                          {index === 0 && "ü•á –õ—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á"}
                          {index === 1 && "ü•à –û—Ç–ª–∏—á–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞"}
                          {index === 2 && "ü•â –•–æ—Ä–æ—à–∏–π –±—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"}
                        </p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-blue-600">{model.score}/100</div>
                      <div className="text-sm text-gray-500">—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ</div>
                    </div>
                  </div>


                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                    <div className="text-center p-3 bg-gray-50 rounded">
                      <div className="text-lg font-semibold text-gray-800">{model.quality_score}/100</div>
                      <div className="text-sm text-gray-500">–ö–∞—á–µ—Å—Ç–≤–æ</div>
                      <div className="text-xs text-blue-600">{getQualityComment(model.quality_score)}</div>
                    </div>
                    <div className="text-center p-3 bg-gray-50 rounded">
                      <div className="text-lg font-semibold text-gray-800">{model.speed_score}/100</div>
                      <div className="text-sm text-gray-500">–°–∫–æ—Ä–æ—Å—Ç—å</div>
                      <div className="text-xs text-blue-600">{getSpeedComment(model.speed_score)}</div>
                    </div>
                    <div className="text-center p-3 bg-gray-50 rounded">
                      <div className="text-lg font-semibold text-gray-800">${model.price_per_1k_tokens}</div>
                      <div className="text-sm text-gray-500">–∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤</div>
                      <div className="text-xs text-blue-600">{getPriceComment(model.price_per_1k_tokens)}</div>
                      <div className="text-xs text-gray-400 mt-1">
                        ${calculatePricePerWord(model.price_per_1k_tokens, formData.inputLanguage, formData.outputLanguage)} –∑–∞ —Å–ª–æ–≤–æ
                      </div>
                    </div>
                    <div className="text-center p-3 bg-gray-50 rounded">
                      <div className="text-lg font-semibold text-gray-800">{(model.context_length / 1000).toFixed(0)}K</div>
                      <div className="text-sm text-gray-500">–ö–æ–Ω—Ç–µ–∫—Å—Ç</div>
                      <div className="text-xs text-blue-600">{getContextComment(model.context_length)}</div>
                    </div>
                  </div>


                  <div className="mb-4">
                    <p className="text-gray-700 mb-2">{model.description}</p>
                    <div className="flex flex-wrap gap-2 mb-2">
                      {model.best_for?.map(feature => (
                        <span key={feature} className="bg-green-100 text-green-700 px-2 py-1 rounded text-sm">
                          {feature}
                        </span>
                      ))}
                    </div>
                    <a
                      href="https://artificialanalysis.ai/"
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-700 text-sm"
                    >
                      –ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ Artificial Analysis ‚Üí
                    </a>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    );
  }
};


export default App;

