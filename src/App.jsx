import React, { useState } from 'react';

const App = () => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    taskTypes: [],
    priorityOrder: ['quality', 'speed', 'budget', 'volume'], // –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    inputLanguage: 'ru',
    outputLanguage: 'ru'
  });
  const [models, setModels] = useState([]);
  const [loading, setLoading] = useState(false);
  const [draggedItem, setDraggedItem] = useState(null);
 
  // ‚≠ê –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® API –ö–õ–Æ–ß ‚≠ê
  const API_KEY = 'aa_UBeRmofLZUpndgJhNQKYXwzEcbqHEGrl';

  // ‚≠ê –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø API –§–£–ù–ö–¶–ò–Ø ‚≠ê
  const fetchModelsFromAPI = async () => {
    if (!API_KEY) {

    }

    setLoading(true);
    try {
      const response = await fetch('https://artificialanalysis.ai/api/v2/data/llms/models', {
        headers: {
          'x-api-key': API_KEY,
          'Content-Type': 'application/json'
        }
      });
     
      if (response.ok) {
        const data = await response.json();
        const formattedModels = data.data?.map(model => ({
          id: model.id,
          name: model.name,
          creator: model.model_creator?.name || 'Unknown',
          quality_score: Math.round(model.evaluations?.artificial_analysis_intelligence_index || 50),
          speed_score: Math.min(100, Math.round((model.median_output_tokens_per_second || 50) / 2)),
          price_per_1k_tokens: (model.pricing?.price_1m_blended_3_to_1 || 1000) / 1000,
          context_length: 32000, // Placeholder, –Ω–µ—Ç –≤ API
          description: `AI –º–æ–¥–µ–ª—å –æ—Ç ${model.model_creator?.name || 'Unknown'}`,
          best_for: ['general']
        })) || [];
       
        setModels(formattedModels.length > 0 ? formattedModels : mockModels);
      } else {
        setModels(mockModels);
      }
    } catch (error) {
      setModels(mockModels);
    } finally {
      setLoading(false);
    }
  };

  const taskTypes = [
    { id: 'translation', name: '–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤', description: '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏, –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è', icon: 'üåê' },
    { id: 'generation', name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π, –ø–æ—Å—Ç–æ–≤, –∫–æ–Ω—Ç–µ–Ω—Ç–∞', icon: '‚úçÔ∏è' },
    { id: 'qa', name: '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', description: '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è', icon: '‚ùì' },
    { id: 'coding', name: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞', description: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞', icon: 'üíª' },
    { id: 'creative', name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏', description: '–ò—Å—Ç–æ—Ä–∏–∏, –ø–æ—ç–∑–∏—è, —Å—Ü–µ–Ω–∞—Ä–∏–∏', icon: 'üé®' },
    { id: 'analysis', name: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö', description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', icon: 'üìä' }
  ];

  const languages = [
    { id: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { id: 'en', name: 'English', flag: 'üá∫üá∏' },
    { id: 'de', name: 'Deutsch', flag: 'üá©üá™' },
    { id: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
    { id: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
    { id: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥' }
  ];

  const priorityItems = [
    { 
      key: 'quality', 
      label: '–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞', 
      icon: '‚≠ê', 
      description: '–¢–æ—á–Ω–æ—Å—Ç—å, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –≥–ª—É–±–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤',
      positionComment: {
        1: '–ì–ª–∞–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π - –≥–æ—Ç–æ–≤ –¥–æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
        2: '–í–∞–∂–Ω–æ, –Ω–æ –º–æ–≥—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–¥–∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤', 
        3: '–°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å - —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ',
        4: '–ù–µ–≤–∞–∂–Ω–æ - –±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç'
      }
    },
    { 
      key: 'speed', 
      label: '–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã', 
      icon: '‚ö°', 
      description: '–í—Ä–µ–º—è –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞',
      positionComment: {
        1: '–ö—Ä–∏—Ç–∏—á–Ω–æ - –∫–∞–∂–¥–∞—è —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ —Å—á–µ—Ç—É',
        2: '–í–∞–∂–Ω–æ - –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ',
        3: '–¢–µ—Ä–ø–∏–º–æ - –º–æ–≥—É –ø–æ–¥–æ–∂–¥–∞—Ç—å',
        4: '–ù–µ–≤–∞–∂–Ω–æ - —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞'
      }
    },
    { 
      key: 'budget', 
      label: '–≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å', 
      icon: 'üí∞', 
      description: '–°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏',
      positionComment: {
        1: '–ì–ª–∞–≤–Ω–æ–µ - –±—é–¥–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω',
        2: '–í–∞–∂–Ω–æ - –∏—â—É –±–∞–ª–∞–Ω—Å —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ',
        3: '–°—Ä–µ–¥–Ω–µ - –≥–æ—Ç–æ–≤ –¥–æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ª—É—á—à–µ–µ',
        4: '–ù–µ–≤–∞–∂–Ω–æ - —Ü–µ–Ω–∞ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞'
      }
    },
    { 
      key: 'volume', 
      label: '–ë–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã', 
      icon: 'üìä', 
      description: '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã',
      positionComment: {
        1: '–ö—Ä–∏—Ç–∏—á–Ω–æ - —Ä–∞–±–æ—Ç–∞—é —Å –±–æ–ª—å—à–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏',
        2: '–í–∞–∂–Ω–æ - –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–µ–Ω –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç',
        3: '–°—Ä–µ–¥–Ω–µ - –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã',
        4: '–ù–µ–≤–∞–∂–Ω–æ - —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã'
      }
    }
  ];

  const mockModels = [
    {
      id: 'gpt-4-turbo',
      name: 'GPT-4 Turbo',
      creator: 'OpenAI',
      quality_score: 100,
      speed_score: 100,
      price_per_1k_tokens: 0.01,
      context_length: 1000,
      description: '–°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á',
      best_for: ['complex reasoning', 'creative writing']
    },
    {
      id: 'claude-3-sonnet',
      name: 'Claude 3 Sonnet',
      creator: 'Anthropic',
      quality_score: 100,
      speed_score: 100,
      price_per_1k_tokens: 0.01,
      context_length: 100,
      description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á',
      best_for: ['analysis', 'writing']
    },
    {
      id: 'gemini-pro',
      name: 'Gemini Pro',
      creator: 'Google',
      quality_score: 100,
      speed_score: 100,
      price_per_1k_tokens: 0.0001,
      context_length: 1000,
      description: '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å',
      best_for: ['fast responses', 'cost-effective']
    }
  ];

  const getQualityComment = (score) => {
    if (score >= 90) return '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
    if (score >= 80) return '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
    if (score >= 70) return '—Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
    return '–±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
  };

  const getSpeedComment = (score) => {
    if (score >= 90) return '–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ';
    if (score >= 80) return '–±—ã—Å—Ç—Ä–æ';
    if (score >= 70) return '—Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å';
    return '–º–µ–¥–ª–µ–Ω–Ω–æ';
  };

  const getPriceComment = (price) => {
    if (price <= 0.001) return '–æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ';
    if (price <= 0.01) return '–Ω–µ–¥–æ—Ä–æ–≥–æ';
    if (price <= 0.02) return '—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞';
    return '–¥–æ—Ä–æ–≥–æ';
  };

  const getContextComment = (context) => {
    if (context >= 100000) return '–æ–≥—Ä–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç';
    if (context >= 50000) return '–±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç';
    if (context >= 10000) return '—Å—Ä–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç';
    return '–º–∞–ª—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç';
  };

  const getScoreComment = (score) => {
    if (score >= 90) return '–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏';
    if (score >= 80) return '–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á';
    if (score >= 70) return '–•–æ—Ä–æ—à–∏–π –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –¥–ª—è –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π';
    if (score >= 60) return '–ü—Ä–∏–µ–º–ª–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞–º–∏';
    if (score >= 50) return '–°—Ä–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –µ—Å—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ';
    return '–°–ª–∞–±–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º';
  };

  const calculatePricePerWord = (pricePerToken, inputLang, outputLang) => {
    const tokenRatios = {
      'en': 0.75, 'ru': 2.5, 'de': 1.2, 'fr': 1.1, 'es': 1.0, 'zh': 1.8
    };
    const inputRatio = tokenRatios[inputLang] || 1;
    const outputRatio = tokenRatios[outputLang] || 1;
    const avgRatio = (inputRatio + outputRatio) / 2;
    return (pricePerToken * avgRatio).toFixed(6);
  };

  const handleTaskTypeToggle = (taskId) => {
    setFormData(prev => ({
      ...prev,
      taskTypes: prev.taskTypes.includes(taskId)
        ? prev.taskTypes.filter(id => id !== taskId)
        : [...prev.taskTypes, taskId]
    }));
  };

  // Drag & Drop —Ñ—É–Ω–∫—Ü–∏–∏
  const handleDragStart = (e, index) => {
    setDraggedItem(index);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = (e, dropIndex) => {
    e.preventDefault();
    
    if (draggedItem === null) return;
    
    const newOrder = [...formData.priorityOrder];
    const draggedPriority = newOrder[draggedItem];
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏
    newOrder.splice(draggedItem, 1);
    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    newOrder.splice(dropIndex, 0, draggedPriority);
    
    setFormData(prev => ({
      ...prev,
      priorityOrder: newOrder
    }));
    
    setDraggedItem(null);
  };

  const calculateModelScore = (model) => {
    // –í–µ—Å–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (1 –º–µ—Å—Ç–æ = 40%, 2 = 30%, 3 = 20%, 4 = 10%)
    const weights = {
      [formData.priorityOrder[0]]: 0.4,
      [formData.priorityOrder[1]]: 0.3,
      [formData.priorityOrder[2]]: 0.2,
      [formData.priorityOrder[3]]: 0.1
    };

    const qualityNorm = model.quality_score;
    const speedNorm = model.speed_score;
    const priceNorm = Math.max(0, 100 - (model.price_per_1k_tokens * 1000));
    const contextNorm = Math.min(100, (model.context_length / 1000) * 2);

    const score = (
      qualityNorm * (weights.quality || 0) +
      speedNorm * (weights.speed || 0) +
      priceNorm * (weights.budget || 0) +
      contextNorm * (weights.volume || 0)
    );

    return Math.min(100, Math.round(score));
  };

  const getRecommendedModels = () => {
    return models
      .map(model => ({
        ...model,
        score: calculateModelScore(model)
      }))
      .sort((a, b) => b.score - a.score);
  };

  const getMedalEmoji = (place) => {
    switch (place) {
      case 1: return 'ü•á';
      case 2: return 'ü•à';
      case 3: return 'ü•â';
      default: return '‚≠ê';
    }
  };

  const handleNextStep = async () => {
    await fetchModelsFromAPI();
    setStep(2);
  };

  if (step === 1) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg">
          {/* –õ–æ–≥–æ—Ç–∏–ø –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
          <div className="text-center mb-8">
            <h1 className="text-5xl font-bold text-blue-600 mb-4">
              GetBestAI
            </h1>
            <p className="text-lg text-gray-700 max-w-2xl mx-auto">
              –£–º–Ω—ã–π –ø–æ–¥–±–æ—Ä AI –º–æ–¥–µ–ª–µ–π –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ, —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, 
              —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
            </p>
          </div>

          {/* Progress Bar */}
          <div className="mb-8">
            <div className="flex items-center justify-center mb-4">
              <div className="w-8 h-8 rounded-full bg-blue-600 text-white flex items-center justify-center text-sm font-medium">1</div>
              <div className="w-12 h-1 mx-2 bg-gray-200" />
              <div className="w-8 h-8 rounded-full bg-gray-200 text-gray-500 flex items-center justify-center text-sm font-medium">2</div>
            </div>
            <div className="text-center text-sm text-gray-600">
              –®–∞–≥ 1 –∏–∑ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            </div>
          </div>

          {/* Task Types Selection */}
          <div className="mb-8">
            <h3 className="text-lg font-medium text-gray-800 mb-2">
              –¢–∏–ø—ã –∑–∞–¥–∞—á 
            </h3>
            <p className="text-sm text-gray-500 mb-4">
              üí° –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å AI. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏.
            </p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {taskTypes.map(task => (
                <button
                  key={task.id}
                  onClick={() => handleTaskTypeToggle(task.id)}
                  className={`p-4 text-left border rounded-lg transition-all ${
                    formData.taskTypes.includes(task.id)
                      ? 'border-blue-500 bg-blue-50 text-blue-700'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <div className="flex items-center gap-2 mb-2">
                    <span className="text-lg">{task.icon}</span>
                    <div className="font-medium">{task.name}</div>
                  </div>
                  <div className="text-sm text-gray-500">{task.description}</div>
                </button>
              ))}
            </div>
          </div>

          {/* Priority Ranking - Drag & Drop */}
          <div className="mb-8">
            <h3 className="text-lg font-medium text-gray-800 mb-2">
              –†–∞—Å—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
            </h3>
            <p className="text-sm text-gray-500 mb-4">
              üí° –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –Ω–∞–≤–µ—Ä—Ö. 1 –º–µ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏.
            </p>
            
            <div className="space-y-3">
              {formData.priorityOrder.map((priorityKey, index) => {
                const item = priorityItems.find(p => p.key === priorityKey);
                return (
                  <div
                    key={priorityKey}
                    draggable
                    onDragStart={(e) => handleDragStart(e, index)}
                    onDragOver={handleDragOver}
                    onDrop={(e) => handleDrop(e, index)}
                    className="flex items-center p-4 bg-white border-2 border-gray-200 rounded-lg cursor-move hover:border-gray-300 transition-all"
                  >
                    <span className="text-gray-400 mr-3 text-xl">‚ãÆ‚ãÆ</span>
                    <span className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold mr-4 text-white ${
                      index === 0 ? 'bg-yellow-500' : 
                      index === 1 ? 'bg-gray-400' : 
                      index === 2 ? 'bg-amber-600' : 'bg-gray-300'
                    }`}>
                      {index + 1}
                    </span>
                    <span className="text-xl mr-3">{item?.icon}</span>
                    <div className="flex-1">
                      <div className="font-medium text-gray-800">{item?.label}</div>
                      <div className="text-sm text-gray-500">{item?.description}</div>
                      <div className="text-xs text-blue-600 mt-1">
                        {item?.positionComment[index + 1]}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Languages */}
          <div className="mb-8">
            <h3 className="text-lg font-medium text-gray-800 mb-2">–Ø–∑—ã–∫–∏ —Ä–∞–±–æ—Ç—ã</h3>
            <p className="text-sm text-gray-500 mb-4">
              üí° –†–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏, —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å.
            </p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –Ø–∑—ã–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
                </label>
                <select
                  value={formData.inputLanguage}
                  onChange={(e) => setFormData(prev => ({ ...prev, inputLanguage: e.target.value }))}
                  className="w-full p-2 border border-gray-300 rounded-lg"
                >
                  {languages.map(lang => (
                    <option key={lang.id} value={lang.id}>
                      {lang.flag} {lang.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                </label>
                <select
                  value={formData.outputLanguage}
                  onChange={(e) => setFormData(prev => ({ ...prev, outputLanguage: e.target.value }))}
                  className="w-full p-2 border border-gray-300 rounded-lg"
                >
                  {languages.map(lang => (
                    <option key={lang.id} value={lang.id}>
                      {lang.flag} {lang.name}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          {/* Next Button */}
          <button
            onClick={handleNextStep}
            disabled={formData.taskTypes.length === 0}
            className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            –ü–æ–¥–æ–±—Ä–∞—Ç—å –º–æ–¥–µ–ª–∏
            <span>‚Üí</span>
          </button>
         
          {formData.taskTypes.length === 0 && (
            <p className="text-center text-sm text-red-500 mt-2">
              –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –∑–∞–¥–∞—á–∏
            </p>
          )}
        </div>
      </div>
    );
  }

  if (step === 2) {
    const recommendedModels = getRecommendedModels();

    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto p-6">
          <div className="mb-8">
            <button
              onClick={() => setStep(1)}
              className="text-blue-600 hover:text-blue-700 mb-4 flex items-center gap-1"
            >
              ‚Üê –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            </button>
           
            {/* Progress Bar */}
            <div className="mb-6">
              <div className="flex items-center justify-center mb-4">
                <div className="w-8 h-8 rounded-full bg-blue-600 text-white flex items-center justify-center text-sm font-medium">1</div>
                <div className="w-12 h-1 mx-2 bg-blue-600" />
                <div className="w-8 h-8 rounded-full bg-blue-600 text-white flex items-center justify-center text-sm font-medium">2</div>
              </div>
              <div className="text-center text-sm text-gray-600">
                –®–∞–≥ 2 –∏–∑ 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞
              </div>
            </div>
           
            <h1 className="text-3xl font-bold text-gray-800 mb-2">
              –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å
            </h1>
            <p className="text-gray-600">
              –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–∞—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º: {formData.priorityOrder.map((p, i) => 
                `${i + 1}. ${priorityItems.find(item => item.key === p)?.label}`
              ).join(', ')}
            </p>
          </div>

          {loading ? (
            <div className="flex items-center justify-center py-12">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span className="ml-2">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏...</span>
            </div>
          ) : (
            <div className="space-y-6">
              {recommendedModels.slice(0, 3).map((model, index) => (
                <div key={model.id} className="bg-white rounded-lg shadow-lg p-6 border-l-4 border-blue-500">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">{getMedalEmoji(index + 1)}</span>
                      <div>
                        <div className="flex items-center gap-2 mb-1">
                          <h3 className="text-xl font-bold text-gray-800">{model.name}</h3>
                          <span className="text-gray-500">by {model.creator}</span>
                        </div>
                        <p className="text-blue-600 text-sm mb-1">
                          {index === 0 && "ü•á –õ—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á"}
                          {index === 1 && "ü•à –û—Ç–ª–∏—á–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞"}
                          {index === 2 && "ü•â –•–æ—Ä–æ—à–∏–π –±—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"}
                        </p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-blue-600">{model.score}/100</div>
                      <div className="text-sm text-gray-500">—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ</div>
                      <div className="text-xs text-gray-400 mt-1 max-w-32">
                        {getScoreComment(model.score)}
                      </div>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                    <div className="text-center p-3 bg-gray-50 rounded">
                      <div className="text-lg font-semibold text-gray-800">{model.quality_score}/100</div>
                      <div className="text-sm text-gray-500">–ö–∞—á–µ—Å—Ç–≤–æ</div>
                      <div className="text-xs text-blue-600">{getQualityComment(model.quality_score)}</div>
                    </div>
                    <div className="text-center p-3 bg-gray-50 rounded">
                      <div className="text-lg font-semibold text-gray-800">{model.speed_score}/100</div>
                      <div className="text-sm text-gray-500">–°–∫–æ—Ä–æ—Å—Ç—å</div>
                      <div className="text-xs text-blue-600">{getSpeedComment(model.speed_score)}</div>
                    </div>
                    <div className="text-center p-3 bg-gray-50 rounded">
                      <div className="text-lg font-semibold text-gray-800">${model.price_per_1k_tokens.toFixed(3)}</div>
                      <div className="text-sm text-gray-500">–∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤</div>
                      <div className="text-xs text-blue-600">{getPriceComment(model.price_per_1k_tokens)}</div>
                      <div className="text-xs text-gray-400 mt-1">
                        ${calculatePricePerWord(model.price_per_1k_tokens, formData.inputLanguage, formData.outputLanguage)} –∑–∞ —Å–ª–æ–≤–æ
                      </div>
                    </div>
                    <div className="text-center p-3 bg-gray-50 rounded">
                      <div className="text-lg font-semibold text-gray-800">{(model.context_length / 1000).toFixed(0)}K</div>
                      <div className="text-sm text-gray-500">–ö–æ–Ω—Ç–µ–∫—Å—Ç</div>
                      <div className="text-xs text-blue-600">{getContextComment(model.context_length)}</div>
                    </div>
                  </div>

                  <div className="mb-4">
                    <p className="text-gray-700 mb-2">{model.description}</p>
                    <div className="flex flex-wrap gap-2 mb-2">
                      {model.best_for?.map(feature => (
                        <span key={feature} className="bg-green-100 text-green-700 px-2 py-1 rounded text-sm">
                          {feature}
                        </span>
                      ))}
                    </div>
                    <a
                      href="https://artificialanalysis.ai/"
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-700 text-sm"
                    >
                      –ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ Artificial Analysis ‚Üí
                    </a>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    );
  }
};

export default App;